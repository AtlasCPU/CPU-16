using System;
using System.IO;
using System.Text;

namespace ATLAS_MICRO_ASSEMBLER_8
{
    class Program
    {
        static void Main(string[] args)
        {
            // ATLAS CPU-8 MICRO-ASSEMBLER
            // WRITTEN BY HAYDEN B. - 2021

            // Define microcode file
            string PATH = @"C:\Users\Hayden\Documents\GitHub\CPU-16\Microassembly\MICROCODE.hex";

            if (!File.Exists(PATH))
            {
                // Create a file to write to.
                File.WriteAllText(PATH, "v2.0 raw" + Environment.NewLine);
            }

            // Define mnemonics
            // long TEST_TEST       = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000__00000_00000;

            long A_ST       = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00001;
            long B_ST       = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00010;
            long C_ST       = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00011;
            long D_ST       = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00100;
            long E_ST       = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00101;
            long X_ST       = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00110;
            long Y_ST       = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00111;

            long SP_ST      = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_01000;
            long PC_ST      = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_01001;
            long OP1_ST     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_01010;
            long OP2_ST     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_01011;
            long IR_ST      = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_01100;
            long HMAR_ST    = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_01101;
            long LMAR_ST    = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_01110;
            long MAR_ST     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_01111;

            long MEM_ST     = 0b10_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_10000;

            long MDR_ST     = 0b10_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_10001;


            long A_DOUT     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00001_00000;
            long B_DOUT     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00010_00000;
            long C_DOUT     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00011_00000;
            long D_DOUT     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00100_00000;
            long E_DOUT     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00101_00000;
            long X_DOUT     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00110_00000;
            long Y_DOUT     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00111_00000;

            long F_DOUT     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_01000_00000;
            long SP_DOUT    = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_01001_00000;
            long PC_DOUT    = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_01010_00000;
            long SUM_DOUT   = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_01011_00000;
            long LSH_DOUT   = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_01100_00000;
            long RSH_DOUT   = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_01101_00000;
            long SEX_DOUT   = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_01110_00000;
            
            long MEM_DOUT   = 0b11_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_01111_00000;

            long WRD_DOUT   = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_10000_00000;

            long MDR_DOUT   = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_10001_00000;

            long OP1_DOUT   = 0b00_00_000_0_000_0_0_00_0_00_0_1111_000_0000_000_01011_00000;


            long SP_AOUT    = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_001_00000_00000;
            long PC_AOUT    = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_010_00000_00000;
            long MAR_AOUT   = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_011_00000_00000;


            long NZ_FST     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0001_000_00000_00000;
            long V_FST      = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0010_000_00000_00000;
            long C_FST      = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0011_000_00000_00000;
            long NZVC_FST   = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0100_000_00000_00000;
            long IRQ_FST    = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0101_000_00000_00000;


            long N_COND     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_001_0000_000_00000_00000;
            long Z_COND     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_010_0000_000_00000_00000;
            long V_COND     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_011_0000_000_00000_00000;
            long C_COND     = 0b00_00_000_0_000_0_0_00_0_00_0_0000_100_0000_000_00000_00000;


            long ALU_ADD    = 0b00_00_000_0_000_0_0_00_0_10_0_1001_000_0000_000_01011_00000;
            long ALU_ADC    = 0b00_00_000_0_000_0_0_00_0_01_0_1001_000_0000_000_01011_00000;
            long ALU_SUB    = 0b00_00_000_0_000_0_0_00_0_00_0_0110_000_0000_000_01011_00000;
            long ALU_SBB    = 0b00_00_000_0_000_0_0_00_0_01_0_0110_000_0000_000_01011_00000;
            long ALU_AND    = 0b00_00_000_0_000_0_0_00_0_00_1_1011_000_0000_000_01011_00000;
            long ALU_OR     = 0b00_00_000_0_000_0_0_00_0_00_1_1110_000_0000_000_01011_00000;
            long ALU_XOR    = 0b00_00_000_0_000_0_0_00_0_00_1_0110_000_0000_000_01011_00000;
            long ALU_NOT    = 0b00_00_000_0_000_0_0_00_0_00_1_0000_000_0000_000_01011_00000;
            long ALU_LSH    = 0b00_00_000_0_000_0_0_00_0_10_0_1100_000_0000_000_01011_00000;
            long ALU_INC    = 0b00_00_000_0_000_0_0_00_0_10_0_1111_000_0000_000_01011_00000;
            long ALU_DEC    = 0b00_00_000_0_000_0_0_00_0_00_0_0000_000_0000_000_01011_00000;


            long COND_NEG   = 0b00_00_000_0_000_0_0_00_1_00_0_0000_000_0000_000_00000_00000;

            long SP_INC     = 0b00_00_000_0_000_0_0_10_0_00_0_0000_000_0000_000_00000_00000;
            long SP_DEC     = 0b00_00_000_0_000_0_0_11_0_00_0_0000_000_0000_000_00000_00000;

            long PC_INC     = 0b00_00_000_0_000_0_1_00_0_00_0_0000_000_0000_000_00000_00000;

            long F_DIN      = 0b00_00_000_0_000_1_0_00_0_00_0_0000_000_0000_000_00000_00000;

            long SEQ_INC    = 0b00_00_000_0_001_0_0_00_0_00_0_0000_000_0000_000_00000_00000;
            long SEQ_RS0    = 0b00_00_000_0_010_0_0_00_0_00_0_0000_000_0000_000_00000_00000;
            long SEQ_RS1    = 0b00_00_000_0_110_0_0_00_0_00_0_0000_000_0000_000_00000_00000;

            long TEMP_CLR   = 0b00_00_000_1_000_0_0_00_0_00_0_0000_000_0000_000_00000_00000;

            long IRQ_EN     = 0b00_00_001_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00000;
            long DMA_ACK    = 0b00_00_010_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00000;
            long IRQ_ACK    = 0b00_00_100_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00000;

            long X_INC      = 0b00_01_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00000;
            long X_DEC      = 0b00_01_000_0_000_0_0_01_0_00_0_0000_000_0000_000_00000_00000;

            long Y_INC      = 0b00_10_000_0_000_0_0_00_0_00_0_0000_000_0000_000_00000_00000;
            long Y_DEC      = 0b00_10_000_0_000_0_0_01_0_00_0_0000_000_0000_000_00000_00000;


            // Write your microcode here
            //  {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 NOP

            long[,] TEMPLATE = new long[224, 16] {
                //00x CTRL
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, IRQ_FST|SP_ST|SEQ_INC, WRD_DOUT|PC_ST|SEQ_INC, PC_AOUT|MEM_DOUT|MDR_ST|SEQ_INC, MDR_DOUT|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 RST
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 HLT
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|LMAR_ST|SEQ_INC, PC_INC|SEQ_INC, SP_AOUT|PC_DOUT|MEM_ST|SEQ_INC, SP_INC|MAR_AOUT|MEM_DOUT|PC_ST|SEQ_INC, F_DOUT|SP_AOUT|MEM_ST|SEQ_INC, SP_INC|IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_RS1, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 CAL
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, SP_AOUT|PC_DOUT|MEM_ST|SEQ_INC, SP_INC|SEQ_INC, SP_AOUT|F_DOUT|MEM_ST|SEQ_INC, SP_INC|IRQ_FST|SEQ_INC, IRQ_ACK|MAR_ST|SEQ_INC, MAR_AOUT|MEM_DOUT|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF NOP

                //01x JMP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|MDR_ST|SEQ_INC, MDR_DOUT|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 JMP $m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_DOUT|OP1_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 JMP $m+PC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, A_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 JMP $m+A
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, B_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 JMP $m+B
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, C_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 JMP $m+C
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, D_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 JMP $m+D
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, E_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 JMP $m+E
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 JMP $m+X
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 JMP $m+Y
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, SP_DEC|SEQ_INC, SP_AOUT|MEM_DOUT|PC_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF JMP --[$SP]

                //02x JSR
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF NOP

                //03x BRA
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF NOP

                //04x LDA
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|A_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 LDA #m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|MAR_ST|SEQ_INC, PC_INC|MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 LDA $m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_DOUT|OP1_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 LDA $m,PC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, A_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 LDA $m,A
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, B_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 LDA $m,B
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, C_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 LDA $m,C
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, D_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 LDA $m,D
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, E_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 LDA $m,E
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 LDA $m,X
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 LDA $m,Y
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA LDA $m,X++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB LDA $m,Y++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC LDA $m,X--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD LDA $m,Y--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, SP_DEC|SEQ_INC, SP_AOUT|MEM_DOUT|A_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF LDA --SP
                                                                                                                                                                     // 
                //05x LDB
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|B_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 LDB #m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|MAR_ST|SEQ_INC, PC_INC|MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 LDB $m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_DOUT|OP1_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 LDB $m,PC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, A_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 LDB $m,A
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, B_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 LDB $m,B
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, C_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 LDB $m,C
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, D_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 LDB $m,D
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, E_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 LDB $m,E
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 LDB $m,X
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 LDB $m,Y
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA LDB $m,X++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB LDB $m,Y++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC LDB $m,X--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD LDB $m,Y--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, SP_DEC|SEQ_INC, SP_AOUT|MEM_DOUT|B_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF LDB --SP
                
                //06x LDC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|C_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 LDC #m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|MAR_ST|SEQ_INC, PC_INC|MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 LDC $m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_DOUT|OP1_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 LDC $m,PC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, A_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 LDC $m,A
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, B_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 LDC $m,B
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, C_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 LDC $m,C
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, D_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 LDC $m,D
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, E_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 LDC $m,E
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 LDC $m,X
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 LDC $m,Y
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA LDC $m,X++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB LDC $m,Y++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC LDC $m,X--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD LDC $m,Y--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, SP_DEC|SEQ_INC, SP_AOUT|MEM_DOUT|C_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF LDC --SP
                
                //07x LDD
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|D_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 LDD #m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|MAR_ST|SEQ_INC, PC_INC|MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 LDD $m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_DOUT|OP1_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 LDD $m,PC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, A_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 LDD $m,A
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, B_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 LDD $m,B
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, C_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 LDD $m,C
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, D_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 LDD $m,D
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, E_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 LDD $m,E
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 LDD $m,X
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 LDD $m,Y
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA LDD $m,X++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB LDD $m,Y++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC LDD $m,X--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD LDD $m,Y--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, SP_DEC|SEQ_INC, SP_AOUT|MEM_DOUT|D_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF LDD --SP
                
                //08x LDE
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|E_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 LDE #m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|MAR_ST|SEQ_INC, PC_INC|MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 LDE $m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_DOUT|OP1_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 LDE $m,PC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, A_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 LDE $m,A
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, B_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 LDE $m,B
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, C_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 LDE $m,C
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, D_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 LDE $m,D
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, E_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 LDE $m,E
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 LDE $m,X
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 LDE $m,Y
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA LDE $m,X++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB LDE $m,Y++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC LDE $m,X--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD LDE $m,Y--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, SP_DEC|SEQ_INC, SP_AOUT|MEM_DOUT|E_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF LDE --SP
                
                //09x LDX
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|X_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 LDX #m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|MAR_ST|SEQ_INC, PC_INC|MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 LDX $m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_DOUT|OP1_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 LDX $m,PC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, A_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 LDX $m,A
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, B_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 LDX $m,B
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, C_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 LDX $m,C
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, D_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 LDX $m,D
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, E_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 LDX $m,E
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 LDX $m,X
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 LDX $m,Y
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA LDX $m,X++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB LDX $m,Y++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC LDX $m,X--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD LDX $m,Y--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, SP_DEC|SEQ_INC, SP_AOUT|MEM_DOUT|X_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF LDX --SP
                
                //0Ax LDY
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|Y_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 LDY #m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|MAR_ST|SEQ_INC, PC_INC|MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 LDY $m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_DOUT|OP1_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 LDY $m,PC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, A_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 LDY $m,A
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, B_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 LDY $m,B
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, C_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 LDY $m,C
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, D_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 LDY $m,D
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, E_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 LDY $m,E
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 LDY $m,X
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 LDY $m,Y
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA LDY $m,X++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB LDY $m,Y++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC LDY $m,X--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD LDY $m,Y--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, SP_DEC|SEQ_INC, SP_AOUT|MEM_DOUT|Y_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF LDY --SP
                
                //0Bx LDF
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|NZVC_FST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 LDF #m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|MAR_ST|SEQ_INC, PC_INC|MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 LDF $m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_DOUT|OP1_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 LDF $m,PC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, A_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 LDF $m,A
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, B_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 LDF $m,B
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, C_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 LDF $m,C
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, D_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 LDF $m,D
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, E_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 LDF $m,E
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 LDF $m,X
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 LDF $m,Y
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA LDF $m,X++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB LDF $m,Y++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC LDF $m,X--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD LDF $m,Y--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, SP_DEC|SEQ_INC, SP_AOUT|MEM_DOUT|NZVC_FST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF LDF --SP
                
                //0Cx LDS
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|SP_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 LDS #m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|MAR_ST|SEQ_INC, PC_INC|MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 LDS $m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_DOUT|OP1_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 LDS $m,PC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, A_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 LDS $m,A
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, B_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 LDS $m,B
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, C_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 LDS $m,C
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, D_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 LDS $m,D
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, E_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 LDS $m,E
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 LDS $m,X
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 LDS $m,Y
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA LDS $m,X++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB LDS $m,Y++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC LDS $m,X--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, ALU_ADD|MAR_ST|PC_INC|SEQ_INC, MAR_AOUT|MEM_DOUT|SP_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD LDS $m,Y--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF NOP

                //0Dx STA
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x0 NOP
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|MAR_ST|SEQ_INC, PC_INC|MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x1 STA $m
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_DOUT|OP1_ST|SEQ_INC, PC_INC|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x2 STA $m,PC
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, A_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x3 STA $m,A
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, B_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x4 STA $m,B
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, C_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x5 STA $m,C
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, D_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x6 STA $m,D
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, E_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x7 STA $m,E
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x8 STA $m,X
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // x9 STA $m,Y
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xA STA $m,X++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_INC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xB STA $m,Y++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, X_DOUT|OP1_ST|SEQ_INC, X_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xC STA $m,X--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_INC, Y_DOUT|OP1_ST|SEQ_INC, Y_DEC|PC_AOUT|MEM_DOUT|OP2_ST|SEQ_INC, PC_INC|ALU_ADD|MAR_ST|SEQ_INC, MAR_AOUT|A_DOUT|MEM_ST|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xD STA $m,Y--
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SP_AOUT|A_DOUT|MEM_ST|SEQ_INC, SP_INC|IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_RS1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xE STA SP++
                {IRQ_EN|TEMP_CLR|PC_AOUT|MEM_DOUT|IR_ST|SEQ_INC, PC_INC|SEQ_RS0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // xF NOP
            };

            // Interrupts

            int IRQ_DMA = 0b001;
            int IRQ_RST = 0b011;
            int IRQ_IRQ = 0b111;

            long[] INTERRUPT_TABLE = new long[224] {
                0, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_RST,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
                IRQ_IRQ, IRQ_IRQ, IRQ_RST, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ, IRQ_IRQ,
            };

            int instruction = 0;

            while (instruction < 224)
            {
                Console.WriteLine(instruction);
                int imode = 0;

                while (imode < 8)
                {
                    int step = 0;

                    while (step < 16)
                    {
                        if ((imode & INTERRUPT_TABLE[instruction]) != 0)
                        {
                            if ((imode & 0b001) != 0)
                            {

                                if ((INTERRUPT_TABLE[instruction] & 0b00_0001) != 0)
                                {
                                    //Console.WriteLine((IRQ_EN | DMA_ACK).ToString("X"));
                                    File.AppendAllText(PATH, (IRQ_EN | DMA_ACK).ToString("X") + Environment.NewLine);
                                }
                                else
                                {
                                    //Console.WriteLine(TEMPLATE[instruction, step].ToString("X"));
                                    File.AppendAllText(PATH, TEMPLATE[instruction, step].ToString("X") + Environment.NewLine);
                                }

                            }
                            else if ((imode & 0b010) != 0)
                            {

                                if ((INTERRUPT_TABLE[instruction] & 0b00_0010) != 0)
                                {
                                    //Console.WriteLine(TEMPLATE[0, step].ToString("X"));
                                    File.AppendAllText(PATH, TEMPLATE[0, step].ToString("X") + Environment.NewLine);
                                }
                                else
                                {
                                    //Console.WriteLine(TEMPLATE[instruction, step].ToString("X"));
                                    File.AppendAllText(PATH, TEMPLATE[instruction, step].ToString("X") + Environment.NewLine);
                                }
                            }
                            else if ((imode & 0b100) != 0)
                            {
                                if ((INTERRUPT_TABLE[instruction] & 0b00_0100) != 0)
                                {
                                    //Console.WriteLine(TEMPLATE[2, step].ToString("X"));
                                    File.AppendAllText(PATH, TEMPLATE[2, step].ToString("X") + Environment.NewLine);
                                }
                                else
                                {
                                    //Console.WriteLine(TEMPLATE[instruction, step].ToString("X"));
                                    File.AppendAllText(PATH, TEMPLATE[instruction, step].ToString("X") + Environment.NewLine);
                                }
                            }
                        }
                        else
                        {
                            //Console.WriteLine(TEMPLATE[instruction, step].ToString("X"));
                            File.AppendAllText(PATH, TEMPLATE[instruction, step].ToString("X") + Environment.NewLine);
                        }

                        step++;
                    }

                    imode++;

                }
                instruction++;
            }
        }
    }
}


